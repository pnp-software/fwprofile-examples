/**
 * @file
 * This header file declares the function to create one instance of the Example3 procedure.
 * The procedure is configured with a set of function pointers representing the non-default
 * actions and guards of the procedure. Some of these functions may also be declared in
 * this header file in accordance with the configuration of the procedure in the FW Profile
 * Editor. In the latter case, the user has to provide an implementation for these functions
 * in a user-supplied body file.
 *
 * This header file has been automatically generated by the FW Profile Editor.
 * The procedure created by this file is shown in the figure below.
 *
 * <b>Note for node Initial Node</b>
 * Initial node. The procedure starts here
 *
 * <b>Note for node NODE1</b>
 * Action node 1
 *
 * <b>Note for node DECISION1</b>
 * Decision node
 *
 * <b>Note for node NODE3</b>
 * Action node 3
 *
 * <b>Note for node NODE2</b>
 * Action node 2
 *
 * <b>Note for node NODE4</b>
 * Action node 4
 *
 * <b>Note for node Final Node</b>
 * Final node. The procedure terminates here
 *
 * @image html Example3.png
 *
 * @author FW Profile code generator version 5.02
 * @date Created on: Dec 22 2016 12:12:41
 */

/** Make sure to include this header file only once */
#ifndef EXAMPLE3_H_
#define EXAMPLE3_H_

/** FW Profile function definitions */
#include "FwPrConstants.h"

/**
 * Create a new procedure descriptor.
 * This interface creates the procedure descriptor directally.
 * @param prData the pointer to the procedure data.
 * A value of NULL is legal (note that the default value of the pointer
 * to the procedure data when the procedure is created is NULL).
 * @return the pointer to the procedure descriptor
 */
FwPrDesc_t Example3Create(void* prData);

/**
 * Action Action1
 * @param smDesc the procedure descriptor
 */
void Action1(FwPrDesc_t prDesc);

/**
 * Action Action2
 * @param smDesc the procedure descriptor
 */
void Action2(FwPrDesc_t prDesc);

/**
 * Guard Guard1
 * @param smDesc the procedure descriptor
 * @return 1 if the guard is fulfilled, otherwise 0.
 */
FwPrBool_t Guard1(FwPrDesc_t prDesc);

/**
 * Guard Guard2
 * @param smDesc the procedure descriptor
 * @return 1 if the guard is fulfilled, otherwise 0.
 */
FwPrBool_t Guard2(FwPrDesc_t prDesc);

/**
 * Guard wait
 * @param smDesc the procedure descriptor
 * @return 1 if the guard is fulfilled, otherwise 0.
 */
FwPrBool_t wait(FwPrDesc_t prDesc);

#endif /* Example3_H_ */